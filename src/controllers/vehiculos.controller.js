// src/controllers/vehiculos.controller.js
import connection from "../config/db.js";

// 游릭 Obtener todos los veh칤culos
export const getVehiculos = (req, res) => {
  const sql = 'SELECT * FROM vehiculos';

  connection.query(sql, (err, results) => {
    if (err) {
      console.error('Error al obtener veh칤culos:', err);
      return res.status(500).json({ error: 'Error al obtener veh칤culos' });
    }

    // Enviamos los resultados como array puro
    return res.status(200).json(results);
  });
};

// 游릭 Obtener un veh칤culo por ID
export const getVehiculoById = (req, res) => {
  const { id } = req.params;

  // Validar ID num칠rico
  if (isNaN(id)) {
    return res.status(400).json({ error: 'ID inv치lido' });
  }

  const sql = 'SELECT * FROM vehiculos WHERE id = ?';
  connection.query(sql, [id], (err, results) => {
    if (err) {
      console.error('Error al obtener veh칤culo:', err);
      return res.status(500).json({ error: 'Error al obtener veh칤culo' });
    }
    if (results.length === 0) {
      return res.status(404).json({ error: 'Veh칤culo no encontrado' });
    }

    return res.json(results[0]);
  });
};

// 游릭 Agregar un nuevo veh칤culo
export const addVehiculo = (req, res) => {
  const {
    marca,
    modelo,
    version,
    matricula,
    color,
    ano,
    kilometros,
    combustible,
    precio,
    estado,
  } = req.body;

  if (!marca || !modelo || !matricula) {
    return res.status(400).json({ error: 'Faltan campos obligatorios' });
  }

  const sql = `
    INSERT INTO vehiculos (marca, modelo, version, matricula, color, ano, kilometros, combustible, precio, estado)
    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
  `;
  const values = [
    marca,
    modelo,
    version,
    matricula,
    color,
    ano,
    kilometros,
    combustible,
    precio,
    estado,
  ];

  connection.query(sql, values, (err, result) => {
    if (err) {
      console.error('Error al insertar veh칤culo:', err.sqlMessage || err.message);
      return res.status(500).json({ error: 'Error al insertar veh칤culo' });
    }

    return res
      .status(201)
      .json({ mensaje: 'Veh칤culo a침adido correctamente', id: result.insertId });
  });
};

// 游릭 Actualizar un veh칤culo
export const updateVehiculo = (req, res) => {
  const { id } = req.params;
  const { marca, modelo, version, matricula, color, ano, kilometros, combustible, precio, estado } = req.body;

  const sql = `
    UPDATE vehiculos
    SET marca = ?, modelo = ?, version = ?, matricula = ?, color = ?, ano = ?, kilometros = ?, combustible = ?, precio = ?, estado = ?
    WHERE id = ?
  `;
  const values = [marca, modelo, version, matricula, color, ano, kilometros, combustible, precio, estado, id];

  connection.query(sql, values, (err, result) => {
    if (err) {
      console.error('Error al actualizar veh칤culo:', err.sqlMessage || err.message);

      // A침adimos manejo m치s claro
      if (err.code === 'ER_DUP_ENTRY') {
        return res.status(400).json({ error: 'Ya existe un veh칤culo con esa matr칤cula' });
      }

      res.status(500).json({ error: 'Error al actualizar veh칤culo' });
      return;
    }

    if (result.affectedRows === 0) {
      return res.status(404).json({ error: 'Veh칤culo no encontrado' });
    }

    res.json({ mensaje: 'Veh칤culo actualizado correctamente' });
  });
};


// 游릭 Eliminar un veh칤culo
export const deleteVehiculo = (req, res) => {
  const { id } = req.params;

  // Validar ID num칠rico
  if (isNaN(id)) {
    return res.status(400).json({ error: 'ID inv치lido' });
  }

  const sql = 'DELETE FROM vehiculos WHERE id = ?';
  connection.query(sql, [id], (err, result) => {
    if (err) {
      console.error('Error al eliminar veh칤culo:', err);
      return res.status(500).json({ error: 'Error al eliminar veh칤culo' });
    }
    if (result.affectedRows === 0) {
      return res.status(404).json({ error: 'Veh칤culo no encontrado' });
    }

    return res.json({ mensaje: 'Veh칤culo eliminado correctamente' });
  });
};
